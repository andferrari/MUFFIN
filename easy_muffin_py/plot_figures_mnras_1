#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May 17 10:58:49 2018

@author: rammanouil
"""

 #!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar  2 10:45:05 2018

@author: rammanouil
"""

import os
import numpy as np
import matplotlib.pyplot as pl 
from matplotlib2tikz import save as tikz_save

#%%
daytime = []
daytime.append('2018-05-17 10:24:29.852107') # (0.1,1)
#daytime.append('2018-05-17 09:56:34.107884') # (0,0)
daytime.append('2018-05-17 10:07:36.693645') # (1,10)
daytime.append('2018-05-17 10:35:40.675753') # (1,0.1)


sugar0 = []
sugar1 = []
snr = []
psnr = []
wmse1 = []
wmse3 = []

for day in daytime:
    drctry = os.path.join(os.getcwd(),'output/'+day)
    os.chdir(drctry)
    sugar0.append(np.load('sugar0.npy'))
    sugar1.append(np.load('sugar1.npy'))
    snr.append(np.load('snr_tst.npy'))
    psnr.append(np.load('psnrsure.npy'))
    wmse1.append(np.load('wmse_tst.npy'))
    wmse3.append(np.load('wmsesfdmc_tst.npy'))
    
    os.chdir('../..')

for i in range(2):
    pl.subplot(1,5,1)
    pl.plot(sugar0[i],label='sugar0')
    pl.plot(0*sugar0[i])
    pl.legend()
    
    pl.subplot(1,5,2)
    pl.plot(sugar1[i],label='sugar1')
    pl.plot(0*sugar1[i])
    pl.legend()
    
    pl.subplot(1,5,3)
    pl.plot(snr[i],label='snr')
    pl.legend()
    
    pl.subplot(1,5,4)
    pl.plot(psnr[i],label='psnr')
    pl.legend()
    
    pl.subplot(1,5,5)
    pl.plot(wmse1[i],label='wmse')
    pl.plot(wmse3[i],label='wmses_fdmc')
    pl.legend()

tikz_save('fig1.tex')
    
#overview_data_x = np.arange(0,N)
#overview_data_y = wmse_tst
#fig, ax = pl.subplots()
#ax.plot(overview_data_x, overview_data_y,overview_data_x,wmses_tst,overview_data_x, wmsesfdmc_tst)
#from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes
#axins = zoomed_inset_axes(ax, 2.5, loc=1) # zoom-factor: 2.5, location: upper-left
#axins.plot(overview_data_x, overview_data_y,overview_data_x,wmses_tst,overview_data_x, wmsesfdmc_tst)
#x1, x2, y1, y2 = 1000, 1500, 0.116, 0.14 # specify the limits
#axins.set_xlim(x1, x2) # apply the x-limits
#axins.set_ylim(y1, y2) # apply the y-limits
#pl.yticks(visible=False)
#pl.xticks(visible=False)
#from mpl_toolkits.axes_grid1.inset_locator import mark_inset
#mark_inset(ax, axins, loc1=2, loc2=4, fc="none", ec="0.5")





